[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=42", # At least v42 of setuptools required.
  "versioningit",
]

[project]
name = "cratedb-toolkit"
description = "CrateDB Toolkit"
readme = "README.md"
keywords = [
  "cratedb",
  "data-processing",
  "data-retention",
  "toolkit",
]
license = { text = "AGPL 3, EUPL 1.2" }
authors = [
  { name = "Niklas Schmidtmer", email = "niklas@crate.io" },
  { name = "Marija Selakovic", email = "marija@crate.io" },
  { name = "Andreas Motl", email = "andreas.motl@crate.io" },
]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Intended Audience :: Customer Service",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Manufacturing",
  "Intended Audience :: Science/Research",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Telecommunications Industry",
  "License :: OSI Approved :: European Union Public Licence 1.2 (EUPL 1.2)",
  "License :: OSI Approved :: GNU Affero General Public License v3",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Adaptive Technologies",
  "Topic :: Communications",
  "Topic :: Database",
  "Topic :: Documentation",
  "Topic :: Education",
  "Topic :: Internet",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Office/Business",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Embedded Systems",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Object Brokering",
  "Topic :: Software Development :: Pre-processors",
  "Topic :: Software Development :: Quality Assurance",
  "Topic :: Software Development :: Testing",
  "Topic :: Software Development :: Version Control",
  "Topic :: System :: Archiving",
  "Topic :: System :: Benchmark",
  "Topic :: System :: Clustering",
  "Topic :: System :: Distributed Computing",
  "Topic :: System :: Hardware",
  "Topic :: System :: Logging",
  "Topic :: System :: Monitoring",
  "Topic :: System :: Networking",
  "Topic :: System :: Systems Administration",
  "Topic :: Text Processing",
  "Topic :: Utilities",
]
dynamic = [
  "version",
]
dependencies = [
  "attrs<26",
  "boltons<26",
  "cattrs<25",
  "click<9",
  "click-aliases>=1.0.4,<2",
  "colorama<1",
  "colorlog",
  "crash",
  "cratedb-sqlparse==0.0.13",
  "importlib-metadata; python_version<'3.8'",
  "importlib-resources; python_version<'3.9'",
  "orjsonl<2",
  "pympler<1.2",
  "python-dateutil<3",
  "python-dotenv<2",
  "python-slugify<9",
  "pyyaml<7",
  "sqlalchemy-cratedb>=0.42.0.dev2",
  "sqlparse<0.6",
  "tqdm<5",
  "typing-extensions<5; python_version<='3.7'",
  "vasuki==0.7.0",
  "verlib2<0.4",
  "yarl<1.21",
]
optional-dependencies.all = [
  "cratedb-toolkit[full,influxdb,mongodb]",
]
optional-dependencies.cfr = [
  "duckdb<1.3",
  "marimo<0.14",
  "matplotlib<3.11",
  "numpy<2.3",
  "pandas<2.3",
  "polars<1.28",
  "pyarrow<19.1",
]
optional-dependencies.cloud = [
  "croud==1.13.0",
]
optional-dependencies.datasets = [
  "datasets<4",
  "kaggle<1.8",
]
optional-dependencies.develop = [
  "black[jupyter]<26",
  "mypy<1.16",
  "poethepoet<1",
  "pyproject-fmt<3",
  "ruff<0.12",
  "validate-pyproject<1",
]
optional-dependencies.docs = [
  "furo",
  "myst-parser[linkify]>=0.18,<5",
  "sphinx-autobuild==2021.3.14",   # Newer versions stopped "watching" appropriately?
  "sphinx-copybutton",
  "sphinx-design-elements<1",
  "sphinxcontrib-mermaid<2",
  "sphinxext-opengraph<1",
]
optional-dependencies.docs-api = [
  "beautifulsoup4",
  "rich>=3.3.2,<15",
]
optional-dependencies.dynamodb = [
  "boto3",
  "commons-codec>=0.0.20",
]
optional-dependencies.full = [
  "cratedb-toolkit[cfr,cloud,datasets,docs-api,io,mcp,service]",
]
optional-dependencies.influxdb = [
  "cratedb-toolkit[io]",
  "influxio>=0.5,<1",
]
optional-dependencies.io = [
  "cr8",
  "dask[dataframe]>=2020",
  "fsspec[s3,http]",
  "pandas>=1,<2.3",
  "polars<1.28",
  "sqlalchemy>=2",
  "universal-pathlib<0.3",
]
optional-dependencies.kinesis = [
  "aiobotocore<2.22",
  "async-kinesis<1.2",
  "botocore<1.38",
  "commons-codec>=0.0.20",
  "lorrystream[carabas]>=0.0.6",
]
optional-dependencies.mcp = [
  "mcp<1.5; python_version>='3.10'",
]
optional-dependencies.mongodb = [
  "commons-codec[mongodb,zyp]>=0.0.21",
  "cratedb-toolkit[io]",
  "orjson>=3.3.1,<4",
  "pymongo>=3.10.1,<4.10",
  "python-bsonjs<0.7",
  "rich>=3.3.2,<15",
  "undatum<1.1",
]
optional-dependencies.pymongo = [
  "jessiql==1.0.0rc1",
  "pandas<2.2",
  "pymongo<4.9",
  "sqlalchemy<2",
]
optional-dependencies.release = [
  "build<2",
  "twine<7",
]
optional-dependencies.release-cfr = [
  "poethepoet<1",
  "pyinstaller<7",
]
optional-dependencies.service = [
  "fastapi<0.116",
  "uvicorn<0.35",
]
optional-dependencies.test = [
  "cratedb-toolkit[testing]",
  "httpx<0.29",
  "markdown-it-py<4",
  "pueblo[dataframe]",
  "pydantic-core<3",
  "pytest<9",
  "pytest-cov<7",
  "pytest-mock<4",
  "responses<0.26",
  "testcontainers-azurite==0.0.1rc1",
  "testcontainers-localstack==0.0.1rc1",
  "testcontainers-minio==0.0.1rc1",
]
optional-dependencies.test-mongodb = [
  "cratedb-toolkit[test]",
  "testcontainers-mongodb==0.0.1rc1",
]
optional-dependencies.testing = [
  "testcontainers<5",
]
urls.Changelog = "https://github.com/crate/cratedb-toolkit/blob/main/CHANGES.md"
urls.Documentation = "https://cratedb-toolkit.readthedocs.io/"
urls.Homepage = "https://cratedb-toolkit.readthedocs.io/"
urls.Issues = "https://github.com/crate/cratedb-toolkit/issues"
urls.Repository = "https://github.com/crate/cratedb-toolkit"
scripts.cratedb-cfr = "cratedb_toolkit.cfr.cli:cli"
scripts.cratedb-retention = "cratedb_toolkit.retention.cli:cli"
scripts.cratedb-toolkit = "cratedb_toolkit.cli:cli"
scripts.ctk = "cratedb_toolkit.cli:cli"
scripts.migr8 = "cratedb_toolkit.io.mongodb.cli:main"
entry-points.pytest11.cratedb_service = "cratedb_toolkit.testing.pytest"

[tool.setuptools.packages.find]
namespaces = false

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120

extend-exclude = [
  "amqp-to-mqtt.py",
  "workbench.py",
]

lint.select = [
  # Builtins
  "A",
  # Bugbear
  "B",
  # comprehensions
  "C4",
  # Pycodestyle
  "E",
  # eradicate
  "ERA",
  # Pyflakes
  "F",
  # isort
  "I",
  # pandas-vet
  "PD",
  # return
  "RET",
  # Bandit
  "S",
  # print
  "T20",
  "W",
  # flake8-2020
  "YTT",
]

lint.extend-ignore = [
  # Module `xxx` shadows a Python standard-library module
  "A005",
  # zip() without an explicit strict= parameter
  "B905",
  # df is a bad variable name. Be kinder to your future self.
  "PD901",
  # Unnecessary variable assignment before `return` statement
  "RET504",
  # Unnecessary `elif` after `return` statement
  "RET505",
  # Probable insecure usage of temporary file or directory
  "S108",
]

lint.per-file-ignores."cratedb_toolkit/retention/cli.py" = [ "T201" ]       # Allow `print`
lint.per-file-ignores."cratedb_toolkit/sqlalchemy/__init__.py" = [ "F401" ] # Allow `moduleÂ´ imported but unused
lint.per-file-ignores."doc/conf.py" = [ "A001", "ERA001" ]
lint.per-file-ignores."examples/*" = [ "ERA001", "F401", "T201", "T203" ]   # Allow `print` and `pprint`
lint.per-file-ignores."tests/*" = [ "S101" ]                                # Allow use of `assert`, and `print`.
lint.per-file-ignores."tests/adapter/test_rockset.py" = [ "E402" ]
lint.per-file-ignores."tests/info/test_http.py" = [ "E402" ]

[tool.pytest.ini_options]
addopts = """
  -rfEXs -p pytester --strict-markers --verbosity=3
  --cov --cov-report=term-missing --cov-report=xml
  """
minversion = "2.0"
log_level = "DEBUG"
log_cli_level = "DEBUG"
log_format = "%(asctime)-15s [%(name)-36s] %(levelname)-8s: %(message)s"
testpaths = [
  "examples",
  "cratedb_toolkit",
  "tests",
]
xfail_strict = true
markers = [
  "cfr",
  "examples",
  "dynamodb",
  "influxdb",
  "kinesis",
  "mongodb",
  "pymongo",
  "slow",
]

[tool.coverage.run]
branch = false
omit = [
  "tests/*",
]
source = [ "cratedb_toolkit" ]

[tool.coverage.report]
fail_under = 0
show_missing = true

[tool.mypy]
packages = [ "cratedb_toolkit" ]
exclude = [
]
check_untyped_defs = true
ignore_missing_imports = true
implicit_optional = true
install_types = true
non_interactive = true

[tool.versioningit.vcs]
method = "git-archive"
default-tag = "v0.0.0"
describe-subst = "$Format:%(describe:tags,match=v*)$"

# ===================
# Tasks configuration
# ===================

[tool.poe.tasks]

check = [
  "lint",
  "test",
]

docs-autobuild = [
  { cmd = "sphinx-autobuild --open-browser --watch influxio doc doc/_build" },
]
docs-html = [
  { cmd = "sphinx-build -W --keep-going doc doc/_build" },
]
docs-linkcheck = [
  { cmd = "sphinx-build -W --keep-going -b linkcheck doc doc/_build" },
]

format = [
  # Format project metadata.
  { cmd = "pyproject-fmt --keep-full-version pyproject.toml" },

  # Format code.
  # Configure Ruff not to auto-fix a few items that are useful in workbench mode.
  # e.g.: unused imports (F401), unused variables (F841), `print` statements (T201), commented-out code (ERA001)
  { cmd = "ruff format" },
  { cmd = "ruff check --fix --ignore=ERA --ignore=F401 --ignore=F841 --ignore=T20 --ignore=ERA001" },

  # Format examples.
  # Use `black` for the files in `examples/*`, because it knows how to treat Jupyter files well.
  { cmd = "black examples" },
]

lint = [
  { cmd = "ruff format --check" },
  { cmd = "ruff check" },
  { cmd = "validate-pyproject pyproject.toml" },
  { cmd = "mypy" },
]

release = [
  { cmd = "python -m build" },
  { cmd = "twine upload --skip-existing dist/*" },
]

test = { cmd = "pytest" }

build-cfr = { cmd = "pyinstaller cratedb_toolkit/cfr/cli.py --onefile --name cratedb-cfr" }
